<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.macaitech</groupId>
    <artifactId>multimodule</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  
  <artifactId>multimodule-service</artifactId>
  <name>multimodule-service</name>
  <description>约牛-模拟炒股-业务逻辑服务层</description>
  
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <spring.boot.mybatis.version>2.0.1</spring.boot.mybatis.version>
    <zaxxer.hikaricp.version>3.3.1</zaxxer.hikaricp.version>
    <mybatisplus.version>3.0.5</mybatisplus.version>
    <springfox.version>2.9.2</springfox.version>
    <main.class.name>com.macaitech.biz.multimodule.YnTestUserServiceApp</main.class.name>
  </properties>
  <!-- 环境 -->
  <profiles>
		<profile>
			<id>local</id>
			<properties>
				<env>local</env>
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<profile>
			<id>dev</id>
			<properties>
				<env>dev</env>
			</properties>
		</profile>
		<profile>
			<id>test</id>
			<properties>
				<env>test</env>
			</properties>
		</profile>
		<profile>
			<id>pro</id>
			<properties>
				<env>pro</env>
			</properties>
		</profile>
	</profiles>
  
  <dependencies>
  
        <!--自省和监控的集成功能-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <!--注册中心-->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-elasticsearch</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-sleuth-zipkin</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>
	<dependency>
		<groupId>com.baomidou</groupId>
		<artifactId>mybatis-plus</artifactId>
		<version>${mybatisplus.version}</version>
	</dependency>
    <dependency>
        <groupId>com.baomidou</groupId>
        <artifactId>mybatis-plus-boot-starter</artifactId>
        <version>${mybatisplus.version}</version>
    </dependency>
	<dependency>
		<groupId>mysql</groupId>
		<artifactId>mysql-connector-java</artifactId>
		<scope>runtime</scope>
	</dependency>
	  
		  <dependency>
		  	<groupId>com.macaitech</groupId>
		  	<artifactId>multimodule-api</artifactId>
		  	<version>0.0.1-SNAPSHOT</version>
		  </dependency>
		  <dependency>
		  	<groupId>com.macaitech</groupId>
		  	<artifactId>multimodule-common</artifactId>
		  	<version>0.0.1-SNAPSHOT</version>
		  </dependency>
		  
			<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
			<dependency>
			    <groupId>io.springfox</groupId>
			    <artifactId>springfox-swagger2</artifactId>
			    <version>${springfox.version}</version>
			</dependency>
			
		<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
		<dependency>
		    <groupId>io.springfox</groupId>
		    <artifactId>springfox-swagger-ui</artifactId>
		    <version>${springfox.version}</version>
		</dependency>


		<dependency>
			<groupId>com.macaitech</groupId>
			<artifactId>multimodule-base</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
  </dependencies>
  
	<build>
		<filters>
			<filter>src/main/resources/env/${env}-env.properties</filter>
		</filters>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<excludes>
					<exclude>logback-spring.xml</exclude>
					<exclude>mapper/**</exclude>
					<exclude>sql/**</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/resources/env</directory>
				<targetPath>env</targetPath>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven.version}</version>
				<executions>
					<execution>
						<id>default-resources</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>target/classes</outputDirectory>
							<useDefaultDelimiters>false</useDefaultDelimiters>
							<delimiters>
								<delimiter>@</delimiter>
							</delimiters>
							<resources>
								<resource>
									<directory>src/main/java</directory>
									<includes>
										<include>**/*.xml</include>
									</includes>
									<filtering>true</filtering>
								</resource>
								<resource>
									<directory>src/main/resources</directory>
									<includes>
										<include>**</include>
									</includes>
									<filtering>true</filtering>
								</resource>
								<resource>
									<directory>src/main/resources/</directory>
									<filtering>true</filtering>
									<includes>
										<include>**/*.xml</include>
										<include>**/*.yml</include>
										<include>**/*.properties</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
				
			<!-- clean插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
				<version>${maven.version}</version>
				<configuration>
					<filesets>
						<fileset>
							<directory>${basedir}/target</directory>
							<includes>
                    			<include>**/*</include>
                			</includes>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<!-- jar 插件 -->
			<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven.version}</version>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>${main.class.name}</mainClass>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>./</classpathPrefix>
                            <useUniqueVersions>false</useUniqueVersions>
                        </manifest>
                    </archive>
					<includes>
						<include>com/**</include>
					</includes>
				    <executions>
				        <execution>
				            <phase>clean</phase>
				            <goals>
				                <goal>jar</goal>
				            </goals>
				        </execution>
				    </executions>
                </configuration>
            </plugin>
            <!--依赖jar拷贝-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>false</overWriteIfNewer>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            
			<plugin>
			    <groupId>org.codehaus.mojo</groupId>
			    <artifactId>appassembler-maven-plugin</artifactId>
			    <version>2.0.0</version>
			    <executions>
			     <execution>
			      <id>make-assembly</id>
			      <phase>package</phase>
			      <goals>
			       <goal>assemble</goal>
			      </goals>
			     </execution>
			    </executions>
			    <configuration>
			     <!--lib下直接存放jar，没有路径文件夹（如com/apache)，如果没有这个选项则放在lib下的jar包会被com/apache类似的多层文件夹包裹起来-->
			     <repositoryLayout>flat</repositoryLayout>
			     <configurationDirectory>conf</configurationDirectory>
				 <configurationSourceDirectory>target/classes</configurationSourceDirectory>
			     <copyConfigurationDirectory>false</copyConfigurationDirectory>
			     <includeConfigurationDirectoryInClasspath>true</includeConfigurationDirectoryInClasspath>
			     <!--生成的项目的目录位置，这里的client是项目的名称，你可以根据你的需要自己随便命名-->
			     <assembleDirectory>${project.build.directory}/dist</assembleDirectory>
			     <!--java启动参数-->
			     <extraJvmArguments>-Xms128m</extraJvmArguments>
			     <binFileExtensions>
			      <unix>.sh</unix>
			     </binFileExtensions>
			     <platforms>
			      <platform>windows</platform>
			      <platform>unix</platform>
			     </platforms>
			     <repositoryName>lib</repositoryName>
			     <programs>
			      <program>
			       <!--指定主类，脚本名。会生成shell/bat两种类型,也可用platforms指定运行平台-->
			       <mainClass>${main.class.name}</mainClass>
			       <!-- 生成的脚本文件的名称，比如start.sh,你也可以根据你的需要命名成其他名字 -->
			       <name>start</name>
				   <jvmSettings>
					 <extraArguments>
						<extraArgument>-server</extraArgument>
						<extraArgument>-Xmx2G</extraArgument>
						<extraArgument>-Xms1G</extraArgument>
					  </extraArguments>
				   </jvmSettings>
			      </program>
			     </programs>
			    </configuration>
			</plugin>
			<!-- 拷贝配置文件 -->
			<plugin>   
             <artifactId>maven-antrun-plugin</artifactId>    
             <executions>       
                <execution>         
                   <phase>package</phase>
                   <goals>            
                         <goal>run</goal>
                   </goals>             
                   <configuration>       
                     <tasks>
                         <mkdir dir="${project.build.directory}/dist/conf"/>        
                        <copy todir="${project.build.directory}/dist/conf" overwrite="true" > 
                            <fileset dir="${project.build.directory}/classes" erroronmissingdir="false">
				            	<!-- 
				            	<include name="*.yml"/>
				            	<include name="*.xml"/>
				            	<include name="*.properties"/>
				            	 -->
				            	<exclude name="com/**"/>
				            	<exclude name="sql/**"/>
				            	<exclude name="env/**"/>
                            </fileset>
                         </copy>     
                     </tasks>        
                   </configuration>        
                </execution>    
             </executions>  
            </plugin>
		</plugins>		
	</build>  
  
</project>
